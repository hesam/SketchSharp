using Microsoft.Contracts;
using Microsoft.SpecSharp;

[Verify(false)]
public struct SeqOfInt{
  int[] els;
  invariant 0 <= this.Count;

  public int Count{
    get{
      int[] els = this.els;
      return els == null ? 0 : els.Length;
    }
  }
  
  public int this[int index]{
    [Pure][Reads(ReadsAttribute.Reads.Everything)]
    get
      ensures result == (els == null ? -1 : els[index]);
    {
      return els == null ? -1 : els[index];
    }
  }
  
  public void Add(int value)
    ensures this.Count == old(this.Count) + 1;
    ensures forall{int i in (0:this.Count); this[i] == (i == this.Count - 1 ? value : old(this)[i])};
  {
    int[] els = this.els;
    int[] newEls;
    if (els == null)
      newEls = new int[1];
    else{
      newEls = new int[els.Length + 1];
      System.Array.Copy(els, 0, newEls, 0, els.Length);
    }
    newEls[newEls.Length - 1] = value;
    this.els = newEls;
  }
}

static class Tools
{
   public sealed class Range_Enumerator
   {
      [StrictReadonly] public readonly int a;
      [StrictReadonly] public readonly int b;
      public SeqOfInt Values;
//      private int pc = 0;
//      private int x;
//      invariant a <= b;
//      invariant pc == 2 ==> a <= x;
//      invariant pc == 2 ==> x <= b;
//      invariant pc == 2 ==> x == a + this.Values.Count;
//      invariant 0 <= pc;
//      invariant 2 < pc ==> this.Values.Count == this.b - this.a;
//      invariant 0 <= this.Values.Count;
//      invariant forall{int i in (0:this.Values.Count); this.Values[i] == this.a + i};

      [NotDelayed]
      public Range_Enumerator(int a, int b)
         requires a <= b;
         ensures this.a == a;
         ensures this.b == b;
         ensures this.Values.Count == 0;
      {
         this.a = a;
         this.b = b;
         base();
         this.Values = new SeqOfInt();
         assume this.Values.Count == 0; // Remove once initial value assumptions for non-transparent structs are implemented.
      }

      public bool MoveNext()
         ensures this.Values.Count <= this.b - this.a;
         ensures forall{int i in (0:this.Values.Count); this.Values[i] == this.a + i};
         ensures result == true ==> this.Values.Count == old(this.Values.Count) + 1;
         ensures result == false ==> this.Values.Count == old(this.Values.Count);
         ensures result == false ==> this.Values.Count == this.b - this.a;
      {
//         switch (pc)
//         {
//            case 0:
//               this.x = this.a;
//               goto case 1;
//            case 1:
//               if (x < b)
//               {
//                  this.Values.Add(x);
//                  this.pc = 2;
//                  return true;
//               }
//               else
//               {
//                  this.pc = 3;
//                  return false;
//               }
//            case 2:
//               this.x++;
//               goto case 1;
//            default:
//               return false;
//         }
           throw new System.NotImplementedException();
      }

      public int Current
      {
         [Pure][Reads(ReadsAttribute.Reads.Everything)]
         get
            ensures result == this.Values[this.Values.Count - 1];
         {
            return this.Values[this.Values.Count - 1];
         }
      }
   }

   public sealed class Range_Enumerable
   {
      [StrictReadonly] public readonly int a;
      [StrictReadonly] public readonly int b;
      invariant a <= b;

      [NotDelayed]
      public Range_Enumerable(int a, int b)
         requires a <= b;
         ensures this.a == a;
         ensures this.b == b;
      {
         this.a = a;
         this.b = b;
         base();
      }

      public Range_Enumerator! GetEnumerator()
         ensures result.a == this.a;
         ensures result.b == this.b;
         ensures result.Values.Count == 0;
         ensures result.IsNew;
      {
         Range_Enumerator result = new Range_Enumerator(this.a, this.b);
         return result;
      }
   }

   public static Range_Enumerable! Range(int a, int b)
      requires a <= b;
      ensures result.a == a && result.b == b;
      ensures result.IsNew;
   {
      return new Range_Enumerable(a, b);
   }
   
   static void Range_Body(int a, int b)
       requires a <= b;
   {
      SeqOfInt values = new SeqOfInt();
      assume values.Count == 0;
      
      for (int x = a; x < b; x++)
         invariant values.Count <= b - a;
         invariant forall{int i in (0:values.Count); values[i] == (a | i)};
         invariant x == a + values.Count;
      {
         values.Add(a | (x-a));
      }

      assert values.Count == b - a;
   }
}

static class Test
{
   static void Main()
   {
      int sum = 0;
      Tools.Range_Enumerable! c = Tools.Range(1, 3);
      Tools.Range_Enumerator! e = c.GetEnumerator();
      while (e.MoveNext())
         invariant e.Values.Count == 0 ==> sum == 0;
         invariant e.Values.Count == 1 ==> sum == 1;
         invariant e.Values.Count == 2 ==> sum == 3;
         invariant e.IsPeerConsistent;
      {
         sum += e.Current;
      }
      assert sum == 3;
   }
}
