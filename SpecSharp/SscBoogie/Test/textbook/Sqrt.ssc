using Microsoft.Contracts;

class Sqrt
{ 
  [Pure] public static int sqr(int a) 
    ensures result == a*a;
  { return (a*a);}
    
  /// <summary>
  /// This is the most straightforward version.  It performs multiplications in
  /// place (as opposed to invoking the sqr method), both in the specification
  /// and in the body of the code.  The loop invariant is one of the two postconditions;
  /// the negation of the guard is the other postcondition.
  /// </summary>
  public static int ISqrt0(int x)
    requires 0 <= x;
    ensures result*result <= x && x < (result+1)*(result+1);
  {
    int r = 0;
    while (!(x < (r+1)*(r+1)))
      invariant r*r <= x;
    {
      r++;
    }
    return r;
  }

  /// <summary>
  /// In this version, the multiplication in the loop guard is replaced by a variable in
  /// the simplest of ways.  I also changed "!(x < s)" to "(s <= x)" in the guard.
  /// </summary>
  public static int ISqrt1(int x)
    requires 0 <= x;
    ensures result*result <= x && x < (result+1)*(result+1);
  {
    int r = 0;
    int s = 1;
    while (s <= x)
      invariant r*r <= x;
      invariant s == (r+1)*(r+1);
    {
      r++;
      s = (r+1)*(r+1);  // cheesy update, but "obviously" correct
    }
    return r;
  }
    
  /// <summary>
  /// Here, the cheesy update of a is replaced by something more interesting.  It makes
  /// use of the following arithmetic equalities:
  ///       (r+1+1)*(r+1+1)
  ///   ==  (r+2)*(r+2)
  ///   ==  r*r + 4*r + 4
  ///   ==  r*r + 2*r + 1 + 2*r + 3
  ///   ==  (r+1)*(r+1) + 2*r + 3
  /// This calculation suggests that we want to keep track of 2*r+3 in a variable.
  /// </summary>
  public static int ISqrt2(int x)
    requires 0 <= x;
    ensures result*result <= x && x < (result+1)*(result+1);
  {
    int r = 0;
    int s = 1;
    int t = 3;
    while (s <= x)
      invariant r*r <= x;
      invariant s == (r+1)*(r+1);
      invariant t == 2*r + 3;
    {
      r++;
      s = s + t;
      t = t + 2;
    }
    return r;
  }

  /// <summary>
  /// For this final version, I'm using the sqr method instead of doing squaring
  /// directly.  I'm not sure that's an improvement to the spec, but we certainly
  /// would want it to work.
  /// </summary>
  public static int ISqrt3(int x)
    requires 0 <= x;
    ensures sqr(result) <= x && x < sqr(result+1);
  {
    int r = 0;
    int s = 1;
    int t = 3;
    while (s <= x)
      invariant sqr(r) <= x;
      invariant s == sqr(r+1);
      invariant t == 2*r + 3;
    {
      r++;
      s = s + t;
      t = t + 2;
    }
    return r;
  }

}
