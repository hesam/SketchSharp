/* MaxMinClass.ssc
 * Calculate the max /min value in an array (using a class)
 * Various examples of using min and max with and without Filters
 * MaxEven Illustrates filters as implemented with min and max quantifers
 * Calculate the min values in an array - while loop
 * Rosemary Monahan
 * 6th March 2007
 */
 
 //verifies
 
 class ArrayMaxMin
{
  // array of integers
  public int[]! a = new int[100];

  
  
  public int Max()
   ensures result == max{int i in (0: a.Length); a[i]};
  {
    int m = System.Int32.MinValue;;
    for (int n = 0; n < a.Length; n++)
      invariant n <= a.Length;
      invariant m == max{int i in (0: n); a[i]};
    {
      if(a[n] > m)
      {
        m = a[n];
      }
      
    }
    return m;
  }


  public int Min()
   ensures result == min{int i in (0: a.Length); a[i]};
  {
    int m = System.Int32.MaxValue;
    for (int n = 0; n < a.Length; n++)
      invariant n <= a.Length;
      invariant m == min{int i in (0: n); a[i]};
    {
      if(a[n] < m)
      {
        m = a[n];
      }
      
    }
    return m;
  }


  public int MinEven()
   ensures result == min{int i in (0: a.Length); ((a[i] % 2)== 0)?a[i]:System.Int32.MaxValue};
  {
    int m = System.Int32.MaxValue;
    for (int n = 0; n < a.Length; n++)
      invariant n <= a.Length;
      invariant m == min{int i in (0: n); ((a[i] % 2)== 0)?a[i]:System.Int32.MaxValue};
    {
      if (((a[n] % 2)== 0)&& (a[n] < m))
      {
        m = a[n];
      }
      
    }
    return m;
  }

public int MaxEven()
ensures result == max{int i in (0: a.Length),a[i] % 2== 0; a[i]};
  {
    int m = System.Int32.MinValue;
    for (int n = 0; n < a.Length; n++)
      invariant n <= a.Length;
      invariant m == max{int i in (0: n),a[i] % 2== 0; a[i]};
    {
      if (((a[n] % 2)== 0)&& (a[n] > m))
      {
        m = a[n];
      } 
    }
    return m;
  }

public int MaxEvenNoFilter()
ensures result == max{int i in (0: a.Length); a[i] % 2== 0 ? a[i] : System.Int32.MinValue};
{
    int m = System.Int32.MinValue;
    for (int n = 0; n < a.Length; n++)
      invariant n <= a.Length;
      invariant m == max{int i in (0: n); a[i] % 2 == 0 ? a[i] : System.Int32.MinValue};
    {
      if (((a[n] % 2)== 0)&& (a[n] > m))
      {
        m = a[n];
      }
      
    }
    return m;
  }

/*  Calculate the min values in an array - while loop
 *  shows use of min quantifer and operator so that we can split off     the nth case.
 *  Rosemary Monahan
 *  14th March 2007
 */

public static int Min(int[]! a)
    ensures result == min{int i in (0: a.Length); a[i]};
  {
    int m = System.Int32.MaxValue;
    int n = 0;
    while( n < a.Length)
      invariant n <= a.Length;
      invariant m == min{int i in (0: n); a[i]};
    {  
      assert m == min{int i in (0: n); a[i]};
      //assert min{m, a[n]} == min{min{int i in (0: n); a[i]},a[n]}; 
      m = min{m, a[n]};
      
      //assert m == min{min{int i in (0: n); a[i]},a[n]}; //causes a crash at debug time
      
      //typing the extra ) causes an immediate crash
      //assert m == min{min{int i in (0: n); a[i]}),a[n]}; //split off nth case
      
      assert m == min{int i in (0: n+1); a[i]};
      n++;
      assert m == min{int i in (0: n); a[i]};
    }  
     assert m == min{int i in (0: n); a[i]} && n == a.Length;
     return m;
  }
}






  
