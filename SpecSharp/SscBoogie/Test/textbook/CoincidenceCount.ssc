// CoincidenceCount.ssc
// Rosemary Monahan 
// 22th March 2007
/* Given 2 integer arrays in monotomnically increasing order, find the number of values occurring in both 
   sequences (Coincidence ount, A Method of Programming, Dijkstra & Feijen)
   Less efficient version as we insist on reaching the end of both arrays even if no overlap can occur
   See CoincidenceCountEfficient for a more efficient solution
*/

class CoincidenceCount
{
  public int Coincidence0(int[]! f, int[]! g)
    requires forall{int i in (0: f.Length), int j in (0: f.Length), i < j; f[i] < f[j]};
    requires forall{int i in (0: g.Length), int j in (0: g.Length), i < j; g[i] < g[j]};
    ensures result == count{int i in (0: f.Length), int j in (0: g.Length); f[i] == g[j]};
  {  
    int ct = 0;
    int m = 0;
    int n = 0; 

    while (m < f.Length || n < g.Length)
      invariant m <= f.Length && n <= g.Length;
      invariant ct == count{int i in (0: m), int j in (0: n); f[i] == g[j]};
      invariant m == f.Length || forall{int j in (0: n); g[j] < f[m]};
      invariant n == g.Length || forall{int i in (0: m); f[i] < g[n]};
    {
      if (n == g.Length || (m < f.Length && f[m] < g[n])) {
        m++;
      } else if (m == f.Length || (n < g.Length && g[n] < f[m])) {
        n++;
      } else {
        assert f[m] == g[n];
        ct++;
        m++;
        n++;
      }
    }

    return ct; 
  } 
}
