/**************************************************************************************/
/* This file was generated by the ResXCodeGenerator. Do not edit or checkin this file */
/**************************************************************************************/

namespace Microsoft.VisualStudio.Package {
    using System;
	using System.Diagnostics;
	using System.Reflection;
    using System.Globalization;
    using System.Resources;
    using System.Text;
    using System.Threading;
    using System.ComponentModel;
    using System.Security.Permissions;

   [AttributeUsage(AttributeTargets.All)]
    internal sealed class SRDescriptionAttribute : DescriptionAttribute {

        private bool replaced = false;

        public SRDescriptionAttribute(string description) : base(description) {
        }

        public override string Description {
            get {
                if (!replaced) {
                    replaced = true;
                    DescriptionValue = SR.GetString(base.Description);
                }
                return base.Description;
            }
        }
    }

    [AttributeUsage(AttributeTargets.All)]
    internal sealed class SRCategoryAttribute : CategoryAttribute {

        public SRCategoryAttribute(string category) : base(category) {
        }

        protected override string GetLocalizedString(string value) {
            return SR.GetString(value);
        }
    }
    internal sealed class SR {
    internal const string AddToNullProjectError = "AddToNullProjectError";
    internal const string Advanced = "Advanced";
    internal const string AttributeLoad = "AttributeLoad";
    internal const string BuildAction = "BuildAction";
    internal const string BuildActionDescription = "BuildActionDescription";
    internal const string BuildVerbosity = "BuildVerbosity";
    internal const string BuildVerbosityDescription = "BuildVerbosityDescription";
    internal const string CancelQueryEdit = "CancelQueryEdit";
    internal const string cli1 = "cli1";
    internal const string Compile = "Compile";
    internal const string ConfirmExtensionChange = "ConfirmExtensionChange";
    internal const string Content = "Content";
    internal const string CopyToLocal = "CopyToLocal";
    internal const string CopyToLocalDescription = "CopyToLocalDescription";
    internal const string Detailed = "Detailed";
    internal const string Diagnostic = "Diagnostic";
    internal const string DirectoryExistError = "DirectoryExistError";
    internal const string EditorViewError = "EditorViewError";
    internal const string EmbeddedResource = "EmbeddedResource";
    internal const string Error = "Error";
    internal const string ErrorInvalidFileName = "ErrorInvalidFileName";
    internal const string ErrorInvalidProjectName = "ErrorInvalidProjectName";
    internal const string ErrorMsBuildRegistration = "ErrorMsBuildRegistration";
    internal const string ErrorSaving = "ErrorSaving";
	internal const string Exe = "Exe";
	internal const string FailedToGetService = "FailedToGetService";
	internal const string FileAlreadyExists = "FileAlreadyExists";
    internal const string FileAlreadyExistsCaption = "FileAlreadyExistsCaption";
    internal const string FileAlreadyInProject = "FileAlreadyInProject";
    internal const string FileAlreadyInProjectCaption = "FileAlreadyInProjectCaption";
    internal const string FileCopyError = "FileCopyError";
    internal const string FileName = "FileName";
    internal const string FileNameDescription = "FileNameDescription";
    internal const string FolderName = "FolderName";
    internal const string FolderNameDescription = "FolderNameDescription";
    internal const string FullPath = "FullPath";
    internal const string FullPathDescription = "FullPathDescription";
    internal const string Library = "Library";
    internal const string Minimal = "Minimal";
    internal const string Misc = "Misc";
    internal const string None = "None";
    internal const string Normal = "Normal";
    internal const string Program = "Program";
    internal const string Project = "Project";
    internal const string ProjectFile = "ProjectFile";
    internal const string ProjectFileDescription = "ProjectFileDescription";
    internal const string ProjectFolder = "ProjectFolder";
    internal const string ProjectFolderDescription = "ProjectFolderDescription";
    internal const string Quiet = "Quiet";
    internal const string RefName = "RefName";
    internal const string RefNameDescription = "RefNameDescription";
    internal const string RenameFolder = "RenameFolder";
    internal const string RTL = "RTL";
    internal const string SaveCaption = "SaveCaption";
    internal const string SaveModifiedDocuments = "SaveModifiedDocuments";
    internal const string SccNotSupported = "SccNotSupported";
    internal const string SccRegistrationFailure = "SccRegistrationFailure";
    internal const string StandardEditorViewError = "StandardEditorViewError";
    internal const string URL = "URL";
    internal const string UseOfDeletedItemError = "UseOfDeletedItemError";
    internal const string v1 = "v1";
    internal const string v11 = "v11";
    internal const string v12 = "v12";
    internal const string v2 = "v2";
    internal const string Warning = "Warning";
    internal const string WinExe = "WinExe";

        static SR loader = null;
        ResourceManager resources;

        private static Object s_InternalSyncObject;
        private static Object InternalSyncObject {
            get {
                if (s_InternalSyncObject == null) {
                    Object o = new Object();
                    Interlocked.CompareExchange(ref s_InternalSyncObject, o, null);
                }
                return s_InternalSyncObject;
            }
        }
        
        internal SR() {
            resources = new System.Resources.ResourceManager("Microsoft.VisualStudio.Package.Project", this.GetType().Assembly);
        }
        
        private static SR GetLoader() {
            if (loader == null) {
                lock (InternalSyncObject) {
                   if (loader == null) {
                       loader = new SR();
                   }
               }
            }
            
            return loader;
        }

        private static CultureInfo Culture {
            get { return null/*use ResourceManager default, CultureInfo.CurrentUICulture*/; }
        }
        
        public static ResourceManager Resources {
            get {
                return GetLoader().resources;
            }
        }
        
        public static string GetString(string name, params object[] args) {
            SR sys = GetLoader();
            if (sys == null)
                return null;
            string res = sys.resources.GetString(name, SR.Culture);
            Debug.Assert(res != null, String.Format(CultureInfo.CurrentUICulture, "Unknown resource: {0}", name));
            if (args != null && args.Length > 0 && res != null) {
                return String.Format(CultureInfo.CurrentCulture, res, args);
            }
            else {
                return res;
            }
        }

        public static string GetString(string name) {
            SR sys = GetLoader();
            if (sys == null)
                return null;
            return sys.resources.GetString(name, SR.Culture);
        }
        
        public static object GetObject(string name) {
            SR sys = GetLoader();
            if (sys == null)
                return null;
            return sys.resources.GetObject(name, SR.Culture);
        }
}
}
