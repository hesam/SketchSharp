//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Contracts;

namespace System
{

    public class Math
    {

        public static Int64 DivRem (Int64 a, Int64 b, ref Int64 result);

        public static int DivRem (int a, int b, ref int result);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Int64 BigMul (int a, int b);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Sign (Decimal value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Sign (double value);
        
        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Sign (Single value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Sign (Int64 value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Sign (int value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Sign (Int16 value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Sign (SByte value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Log (double a, double newBase);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Decimal Min (Decimal val1, Decimal val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Min (double val1, double val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Single Min (Single val1, Single val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static UInt64 Min (UInt64 val1, UInt64 val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Int64 Min (Int64 val1, Int64 val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static UInt32 Min (UInt32 val1, UInt32 val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Min (int val1, int val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static UInt16 Min (UInt16 val1, UInt16 val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Int16 Min (Int16 val1, Int16 val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static byte Min (byte val1, byte val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static SByte Min (SByte val1, SByte val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Decimal Max (Decimal val1, Decimal val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Max (double val1, double val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Single Max (Single val1, Single val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static UInt64 Max (UInt64 val1, UInt64 val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Int64 Max (Int64 val1, Int64 val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static UInt32 Max (UInt32 val1, UInt32 val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Max (int val1, int val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static UInt16 Max (UInt16 val1, UInt16 val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Int16 Max (Int16 val1, Int16 val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static byte Max (byte val1, byte val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static SByte Max (SByte val1, SByte val2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Decimal Abs (Decimal value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Abs (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Single Abs (Single arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Int64 Abs (Int64 value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Abs (int value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Int16 Abs (Int16 value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static SByte Abs (SByte value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double IEEERemainder (double x, double y);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Pow (double arg0, double arg1);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Exp (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Log10 (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Log (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Sqrt (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Floor (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Ceiling (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Decimal Round (Decimal d, int decimals);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static Decimal Round (Decimal d);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Round (double value, int digits)
            requires digits >= 0 otherwise ArgumentOutOfRangeException;
            requires digits <= 15 otherwise ArgumentOutOfRangeException;

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Round (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Tanh (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Sinh (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Cosh (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Tan (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Sin (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Cos (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Atan2 (double arg0, double arg1);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Atan (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Asin (double arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static double Acos (double arg0);
    }
}
