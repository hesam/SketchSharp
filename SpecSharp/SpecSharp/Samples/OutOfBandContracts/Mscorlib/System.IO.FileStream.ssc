//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Win32.SafeHandles;

namespace System.IO
{

    public class FileStream
    {
#if WHIDBEY
        public virtual SafeFileHandle! SafeFileHandle { get; }
#endif
        
        public bool CanSeek
        {
          get;
        }

        public bool CanRead
        {
          get;
        }

        public bool CanWrite
        {
          get;
        }

        public int Handle
        {
          get;
        }

        public bool IsAsync
        {
          get;
        }

        public Int64 Length
        {
          get;
        }

        public Int64 Position
        {
          get;
          set
            requires value >= 0 otherwise ArgumentOutOfRangeException;
        }

        public string Name
        {
          get;
        }

        public void Unlock (Int64 position, Int64 length)
            requires position >= 0 otherwise ArgumentOutOfRangeException;
            requires length >= 0 otherwise ArgumentOutOfRangeException;

        public void Lock (Int64 position, Int64 length)
            requires position >= 0 otherwise ArgumentOutOfRangeException;
            requires length >= 0 otherwise ArgumentOutOfRangeException;

        public void WriteByte (byte value);

        public void EndWrite (IAsyncResult! asyncResult)
            requires asyncResult != null otherwise ArgumentNullException;

        public IAsyncResult BeginWrite (Byte[]! array, int offset, int numBytes, AsyncCallback userCallback, object stateObject)
            requires array != null otherwise ArgumentNullException;
            requires offset >= 0 otherwise ArgumentOutOfRangeException;
            requires numBytes >= 0 otherwise ArgumentOutOfRangeException;
            requires (array.Length - offset) >= numBytes otherwise ArgumentException;

        public int ReadByte ();

        public int EndRead (IAsyncResult! asyncResult)
            requires asyncResult != null otherwise ArgumentNullException;

        public IAsyncResult BeginRead (Byte[]! array, int offset, int numBytes, AsyncCallback userCallback, object stateObject)
            requires array != null otherwise ArgumentNullException;
            requires offset >= 0 otherwise ArgumentOutOfRangeException;
            requires numBytes >= 0 otherwise ArgumentOutOfRangeException;
            requires (array.Length - offset) >= numBytes otherwise ArgumentException;

        public void Write (Byte[]! array, int offset, int count)
            requires array != null otherwise ArgumentNullException;
            requires offset >= 0 otherwise ArgumentOutOfRangeException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires (array.Length - offset) >= count otherwise ArgumentException;

        public Int64 Seek (Int64 offset, SeekOrigin origin)
            requires (int)origin >= 0 otherwise ArgumentException;
            requires (int)origin <= 2 otherwise ArgumentException;

        public int Read (Byte[]! array, int offset, int count)
            requires array != null otherwise ArgumentNullException;
            requires offset >= 0 otherwise ArgumentOutOfRangeException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires (array.Length - offset) >= count otherwise ArgumentException;

        public void SetLength (Int64 value)
            requires value >= 0 otherwise ArgumentOutOfRangeException;

        public void Flush ();

        public void Close ();

        public FileStream (int handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync)
            requires (int)access >= 1 otherwise ArgumentOutOfRangeException;
            requires (int)access <= 3 otherwise ArgumentOutOfRangeException;
            requires bufferSize > 0 otherwise ArgumentOutOfRangeException;

        public FileStream (int handle, FileAccess access, bool ownsHandle, int bufferSize);

        public FileStream (int handle, FileAccess access, bool ownsHandle);

        public FileStream (int handle, FileAccess access);

        public FileStream (string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync);

        public FileStream (string path, FileMode mode, FileAccess access, FileShare share, int bufferSize);

        public FileStream (string path, FileMode mode, FileAccess access, FileShare share);

        public FileStream (string path, FileMode mode, FileAccess access);

        public FileStream (string path, FileMode mode);
    }
}
