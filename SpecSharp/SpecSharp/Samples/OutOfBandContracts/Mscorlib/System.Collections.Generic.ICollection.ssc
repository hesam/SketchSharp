//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using System.Collections;
using System.Runtime.CompilerServices;
using Microsoft.Contracts;

namespace System.Collections.Generic {
  // Summary:
  //     Defines methods to manipulate generic collections.
  public interface ICollection<T> : IEnumerable<T>, IEnumerable {
    // Summary:
    //     Gets the number of elements contained in the System.Collections.Generic.ICollection<T>.
    //
    // Returns:
    //     The number of elements contained in the System.Collections.Generic.ICollection<T>.
    int Count { get; }
    //
    // Summary:
    //     Gets a value indicating whether the System.Collections.Generic.ICollection<T>
    //     is read-only.
    //
    // Returns:
    //     true if the System.Collections.Generic.ICollection<T> is read-only; otherwise,
    //     false.
    bool IsReadOnly { get; }

    // Summary:
    //     Adds an item to the System.Collections.Generic.ICollection<T>.
    //
    // Parameters:
    //   item:
    //     The object to add to the System.Collections.Generic.ICollection<T>.
    //
    // Exceptions:
    //   System.NotSupportedException:
    //     The System.Collections.Generic.ICollection<T> is read-only.
    void Add(T item);
      requires !this.IsReadOnly;
    //
    // Summary:
    //     Removes all items from the System.Collections.Generic.ICollection<T>.
    //
    // Exceptions:
    //   System.NotSupportedException:
    //     The System.Collections.Generic.ICollection<T> is read-only.
    void Clear();
      requires !this.IsReadOnly;
    //
    // Summary:
    //     Determines whether the System.Collections.Generic.ICollection<T> contains
    //     a specific value.
    //
    // Parameters:
    //   item:
    //     The object to locate in the System.Collections.Generic.ICollection<T>.
    //
    // Returns:
    //     true if item is found in the System.Collections.Generic.ICollection<T>; otherwise,
    //     false.
    [Pure][Reads(ReadsAttribute.Reads.Owned)]
    bool Contains(T item);
    //
    // Summary:
    //     Copies the elements of the System.Collections.Generic.ICollection<T> to an
    //     System.Array, starting at a particular System.Array index.
    //
    // Parameters:
    //   array:
    //     The one-dimensional System.Array that is the destination of the elements
    //     copied from System.Collections.Generic.ICollection<T>. The System.Array must
    //     have zero-based indexing.
    //
    //   arrayIndex:
    //     The zero-based index in array at which copying begins.
    //
    // Exceptions:
    //   System.ArgumentOutOfRangeException:
    //     arrayIndex is less than 0.
    //
    //   System.ArgumentNullException:
    //     array is null.
    //
    //   System.ArgumentException:
    //     array is multidimensional.-or-arrayIndex is equal to or greater than the
    //     length of array.-or-The number of elements in the source System.Collections.Generic.ICollection<T>
    //     is greater than the available space from arrayIndex to the end of the destination
    //     array.-or-Type T cannot be cast automatically to the type of the destination
    //     array.
    void CopyTo(T[]! array, int arrayIndex);
    //
    // Summary:
    //     Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection<T>.
    //
    // Parameters:
    //   item:
    //     The object to remove from the System.Collections.Generic.ICollection<T>.
    //
    // Returns:
    //     true if item was successfully removed from the System.Collections.Generic.ICollection<T>;
    //     otherwise, false. This method also returns false if item is not found in
    //     the original System.Collections.Generic.ICollection<T>.
    //
    // Exceptions:
    //   System.NotSupportedException:
    //     The System.Collections.Generic.ICollection<T> is read-only.
    bool Remove(T item);
      requires !this.IsReadOnly;
  }
}
