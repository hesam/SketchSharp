//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Contracts;

namespace System
{
    [Immutable]
    public class String
    {
        [System.Runtime.CompilerServices.IndexerName("Char")]
        public char this [int index]
        {
          get
                  requires 0 <= index && index < this.Length otherwise IndexOutOfRangeException;
        }

        public int Length
        {
          [Pure][Reads(ReadsAttribute.Reads.Nothing)]
          get
                  ensures result >= 0;
        }

        [Pure] [GlobalAccess(false)] [Escapes(true,false)]
        public CharEnumerator! GetEnumerator ();
          ensures result.IsNew;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public TypeCode GetTypeCode ();

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String IsInterned (String! str)
            requires str != null otherwise ArgumentNullException;
            ensures result != null ==> result.Length == str.Length;
            ensures result != null ==> str.Equals(result); 


        public static String Intern (String! str)
            requires str != null otherwise ArgumentNullException;
            ensures result.Length == str.Length;

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Concat (String[]! values)
            requires values != null otherwise ArgumentNullException;
            //ensures result.Length == Sum({ String s in values; s.Length });

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Concat (String str0, String str1, String str2, String str3)
            ensures result.Length == 
                (str0 == null ? 0 : str0.Length) +
                (str1 == null ? 0 : str1.Length) +
                (str2 == null ? 0 : str2.Length) +
                (str3 == null ? 0 : str3.Length);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Concat (String str0, String str1, String str2)
            ensures result.Length == 
                (str0 == null ? 0 : str0.Length) +
                (str1 == null ? 0 : str1.Length) +
                (str2 == null ? 0 : str2.Length);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Concat (String str0, String str1)
            ensures result.Length == 
                (str0 == null ? 0 : str0.Length) +
                (str1 == null ? 0 : str1.Length);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Concat (object[]! args)
            requires args != null otherwise ArgumentNullException;

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Concat (object arg0, object arg1, object arg2, object arg3);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Concat (object arg0, object arg1, object arg2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Concat (object arg0, object arg1);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Concat (object arg0);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String Copy (String! str)
            requires str != null otherwise ArgumentNullException;

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Format (IFormatProvider provider, String! format, object[]! args)
            requires format != null otherwise ArgumentNullException;
            requires args != null otherwise ArgumentNullException;

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Format (String format, object[] args);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Format (String format, object arg0, object arg1, object arg2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Format (String format, object arg0, object arg1);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String! Format (String format, object arg0);

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! Remove (int index, int count)
            requires 0 <= index otherwise ArgumentOutOfRangeException;
            requires index + count <= Length otherwise ArgumentOutOfRangeException;
            ensures result.Length == this.Length - count;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! Replace (String! oldValue, String newValue)
            requires oldValue != null otherwise ArgumentNullException;
            requires oldValue.Length > 0 otherwise ArgumentException;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! Replace (char oldChar, char newChar);

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! Insert (int startIndex, String! value)
            requires value != null otherwise ArgumentNullException;
            requires 0 <= startIndex otherwise ArgumentOutOfRangeException;
            requires startIndex <= this.Length otherwise ArgumentOutOfRangeException;
            ensures result.Length == this.Length + value.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! Trim ();

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! ToUpper (System.Globalization.CultureInfo! culture)
            requires culture != null otherwise ArgumentNullException;
            ensures result.Length == this.Length; // Are there languages for which this isn't true?!?

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! ToUpper ()
            ensures result.Length == this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! ToLower (System.Globalization.CultureInfo! culture)
            requires culture != null otherwise ArgumentNullException;
            ensures result.Length == this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! ToLower ()
            ensures result.Length == this.Length;
            
        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! ToLowerInvariant()
            ensures result.Length == this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public bool StartsWith (String! value)
            requires value != null otherwise ArgumentNullException;
            ensures result ==> value.Length <= this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! PadRight (int totalWidth, char paddingChar)
            requires totalWidth >= 0 otherwise ArgumentException;
            ensures result.Length == totalWidth;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! PadRight (int totalWidth)
            requires totalWidth >= 0 otherwise ArgumentException;
            ensures result.Length == totalWidth;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! PadLeft (int totalWidth, char paddingChar)
            requires totalWidth >= 0 otherwise ArgumentException;
            ensures result.Length == totalWidth;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! PadLeft (int totalWidth)
            requires totalWidth >= 0 otherwise ArgumentException;
            ensures result.Length == totalWidth;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int LastIndexOf (String! value, int startIndex, int count)
            requires value != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex + count <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int LastIndexOf (String! value, int startIndex)
            requires value != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int LastIndexOf (String! value)
            requires value != null otherwise ArgumentNullException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int LastIndexOfAny (char[]! anyOf, int startIndex, int count)
            requires anyOf != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex + count <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int LastIndexOfAny (char[]! anyOf, int startIndex)
            requires anyOf != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int LastIndexOfAny (char[]! anyOf)
            requires anyOf != null otherwise ArgumentNullException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int LastIndexOf (char arg0, int startIndex, int count)
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex + count <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int LastIndexOf (char value, int startIndex)
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int LastIndexOf (char value)
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int IndexOf (String! value, int startIndex, int count)
            requires value != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex + count <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int IndexOf (String! value, int startIndex)
            requires value != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int IndexOf (String! value)
            requires value != null otherwise ArgumentNullException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int IndexOfAny (char[]! anyOf, int startIndex, int count)
            requires anyOf != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex + count <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int IndexOfAny (char[]! anyOf, int startIndex)
            requires anyOf != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int IndexOfAny (char[]! anyOf)
            requires anyOf != null otherwise ArgumentNullException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int IndexOf (char arg0, int startIndex, int count)
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex + count <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int IndexOf (char value, int startIndex)
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex <= Length otherwise ArgumentOutOfRangeException;
            ensures -1 <= result && result < this.Length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int IndexOf (char value)
            ensures -1 <= result && result < this.Length;

        public static readonly string/*!*/ Empty = "";
        
        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public bool EndsWith (String! value)
            requires value != null otherwise ArgumentNullException;

        public static int CompareOrdinal (String strA, int indexA, String strB, int indexB, int length);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int CompareOrdinal (String strA, String strB);

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int CompareTo (String strB);

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int CompareTo (object value);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Compare (String strA, int indexA, String strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo! culture)
            requires culture != null otherwise ArgumentNullException;

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Compare (String strA, int indexA, String strB, int indexB, int length, bool ignoreCase);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Compare(string strA, string strB, StringComparison comparisonType);
        
        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType);
        
        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Compare (String strA, int indexA, String strB, int indexB, int length);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Compare (String strA, String strB, bool ignoreCase, System.Globalization.CultureInfo! culture)
            requires culture != null otherwise ArgumentNullException;

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Compare (String strA, String strB, bool ignoreCase);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static int Compare (String strA, String strB);

        public String (char c, int count)
            ensures this.Length == count;

        public String (char[] array) // maybe null
            ensures array == null ==> this.Length == 0;
            ensures array != null ==> this.Length == array.Length;

        public String (char[]! value, int startIndex, int length)
            requires value != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires length >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex + length <= value.Length otherwise ArgumentOutOfRangeException;
            ensures this.Length == length;

/* These should all be pointer arguments

        public String (ref SByte arg0, int arg1, int arg2, System.Text.Encoding arg3);

        public String (ref SByte arg0, int arg1, int arg2);

        public String (ref SByte arg0);

        public String (ref char arg0, int arg1, int arg2);

        public String (ref char arg0);
 */

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! TrimEnd (params char[] trimChars); // maybe null

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! TrimStart (params char[] trimChars); // maybe null

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! Trim (params char[] trimChars); // maybe null

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! Substring (int startIndex, int length)
            requires 0 <= startIndex otherwise ArgumentOutOfRangeException;
            requires 0 <= length otherwise ArgumentOutOfRangeException;
            requires startIndex + length <= this.Length otherwise ArgumentOutOfRangeException;
            ensures result.Length == length;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String! Substring (int startIndex)
            requires 0 <= startIndex otherwise ArgumentOutOfRangeException;
            requires startIndex <= this.Length otherwise ArgumentOutOfRangeException;
            ensures result.Length == this.Length - startIndex;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String![]! Split (char[] arg0, int arg1);
            //ensures Forall {int i in (0:result.Length); result[i] != null};

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public String![]! Split (char[] separator);
            //ensures Forall {int i in (0:result.Length); result[i] != null};

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public string![]! Split(char[] separator, StringSplitOptions options);
        
        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public string![]! Split(string[] separator, StringSplitOptions options);
        
        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public string![]! Split(char[] separator, int count, StringSplitOptions options);
        
        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public string![]! Split(string[] separator, int count, StringSplitOptions options);
      
        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public char[]! ToCharArray (int startIndex, int length)
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex <= this.Length otherwise ArgumentOutOfRangeException;
            requires startIndex + length <= this.Length otherwise ArgumentOutOfRangeException;
            requires length >= 0 otherwise ArgumentOutOfRangeException;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public char[]! ToCharArray ();

        public void CopyTo (int sourceIndex, char[]! destination, int destinationIndex, int count)
            requires destination != null otherwise ArgumentNullException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires sourceIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires count <= (this.Length - sourceIndex) otherwise ArgumentOutOfRangeException;
            requires destinationIndex <= (destination.Length - count) otherwise ArgumentOutOfRangeException;
            requires destinationIndex >= 0 otherwise ArgumentOutOfRangeException;

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static bool operator != (String a, String b);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static bool operator == (String a, String b);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static bool Equals (String a, String b)
          ensures a != null && (object)a == (object)b ==> result; 

        [Pure][Reads(ReadsAttribute.Reads.Nothing)][RecursionTermination(10)]
        public bool Equals (String arg0);
          ensures (object)this == (object)arg0 ==> result;
          ensures result ==> this.Length == arg0.Length; 

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static String Join (String separator, String[]! value, int startIndex, int count)
            requires value != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex + count <= value.Length otherwise ArgumentOutOfRangeException;

        [Pure][Reads(ReadsAttribute.Reads.Nothing)] 
        public static String Join (String separator, String[]! value)
            requires value != null otherwise ArgumentNullException;
            
        [Pure][Reads(ReadsAttribute.Reads.Nothing)] 
        public bool Contains(char value)
          ensures result ==> 0 <= this.IndexOf(value) && this.IndexOf(value) < this.Length;
          ensures !result ==> this.IndexOf(value) == -1;
          
        [Pure][Reads(ReadsAttribute.Reads.Nothing)] 
        public bool Contains(String value)
          requires value != null otherwise ArgumentNullException;
          ensures result ==> 0 <= this.IndexOf(value) && this.IndexOf(value) < this.Length;
          ensures !result ==> this.IndexOf(value) == -1;
    }
}
