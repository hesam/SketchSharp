//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Contracts;

namespace System
{

    [Immutable]
    public class Type
    {

        public string Namespace
        {
          get;
        }

        public bool IsMarshalByRef
        {
          get;
        }

        public System.Reflection.ConstructorInfo TypeInitializer
        {
          get;
        }

        public bool IsExplicitLayout
        {
          get;
        }

        public bool IsValueType
        {
          get;
        }

        public bool IsAutoClass
        {
          get;
        }

        public bool IsNestedPrivate
        {
          get;
        }

        public bool IsSerializable
        {
          get;
        }

        public System.Reflection.Assembly! Assembly
        {
          get;
        }

        public bool IsNestedAssembly
        {
          get;
        }

        public bool IsNotPublic
        {
          get;
        }

        public bool IsSealed
        {
          get;
        }

        public Guid GUID
        {
          get;
        }

        public bool IsLayoutSequential
        {
          get;
        }

        public bool IsNestedFamily
        {
          get;
        }

        public bool IsNestedFamORAssem
        {
          get;
        }

        public string FullName
        {
          get;
        }

        public virtual Type! MakeArrayType();
        
        public System.Reflection.MemberTypes MemberType
        {
          get;
        }

        public string AssemblyQualifiedName
        {
          get;
        }

        public Type BaseType
        {
          get;
        }

        public RuntimeTypeHandle TypeHandle
        {
          get;
        }

        public bool IsInterface
        {
          get;
        }

        public bool IsAnsiClass
        {
          get;
        }

        public bool IsAutoLayout
        {
          get;
        }

        public bool IsPointer
        {
          get;
        }

        public bool IsEnum
        {
          get;
        }

        public Type ReflectedType
        {
          get;
        }

        public System.Reflection.TypeAttributes Attributes
        {
          get;
        }

        public Type DeclaringType
        {
          get;
        }

        public bool IsNestedFamANDAssem
        {
          get;
        }

        public bool IsContextful
        {
          get;
        }

        public bool IsClass
        {
          get;
        }

        public bool IsPublic
        {
          get;
        }

        public bool IsAbstract
        {
          get;
        }

        public Type UnderlyingSystemType
        {
          get;
        }

        public bool IsPrimitive
        {
          get;
        }

        public System.Reflection.Module! Module
        {
          get;
        }

        public bool IsImport
        {
          get;
        }

        public bool IsArray
        {
          get;
        }

        public bool IsNestedPublic
        {
          get;
        }

        public bool IsByRef
        {
          get;
        }

        public bool IsSpecialName
        {
          get;
        }

        public bool IsUnicodeClass
        {
          get;
        }

        public static System.Reflection.Binder DefaultBinder
        {
          get;
        }

        public bool HasElementType
        {
          get;
        }

        public bool IsCOMObject
        {
          get;
        }

        public System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int GetHashCode ();

        public bool Equals (Type o);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public bool Equals (object o);

        public static Type[] GetTypeArray (Object[]! args)
            requires args != null otherwise ArgumentNullException;

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public string! ToString ();

        public bool IsAssignableFrom (Type c);

        public bool IsInstanceOfType (object o);

        public bool IsSubclassOf (Type c);

        public Type GetElementType ();

        public System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);

        public System.Reflection.MemberInfo[] GetDefaultMembers ();

        public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags arg0);

        public System.Reflection.MemberInfo[] GetMembers ();

        public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);

        public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);

        public System.Reflection.MemberInfo[] GetMember (string name);

        public Type GetNestedType (string arg0, System.Reflection.BindingFlags arg1);

        public Type GetNestedType (string name);

        public Type[] GetNestedTypes (System.Reflection.BindingFlags arg0);

        public Type[] GetNestedTypes ();

        public System.Reflection.PropertyInfo[] GetProperties ();

        public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags arg0);

        public System.Reflection.PropertyInfo GetProperty (string! name)
            requires name != null otherwise ArgumentNullException;

        public System.Reflection.PropertyInfo GetProperty (string! name, Type! returnType)
            requires name != null otherwise ArgumentNullException;
            requires returnType != null otherwise ArgumentNullException;

        public System.Reflection.PropertyInfo GetProperty (string! name, Type[]! types)
            requires name != null otherwise ArgumentNullException;
            requires types != null otherwise ArgumentNullException;

        public System.Reflection.PropertyInfo GetProperty (string! name, Type returnType, Type[]! types)
            requires name != null otherwise ArgumentNullException;
            requires types != null otherwise ArgumentNullException;

        public System.Reflection.PropertyInfo GetProperty (string! name, System.Reflection.BindingFlags bindingAttr)
            requires name != null otherwise ArgumentNullException;

        public System.Reflection.PropertyInfo GetProperty (string! name, Type returnType, Type[]! types, System.Reflection.ParameterModifier[] modifiers)
            requires name != null otherwise ArgumentNullException;
            requires types != null otherwise ArgumentNullException;

        public System.Reflection.PropertyInfo GetProperty (string! name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[]! types, System.Reflection.ParameterModifier[] modifiers)
            requires name != null otherwise ArgumentNullException;
            requires types != null otherwise ArgumentNullException;

        public System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags arg0);

        public System.Reflection.EventInfo[] GetEvents ();

        public System.Reflection.EventInfo GetEvent (string arg0, System.Reflection.BindingFlags arg1);

        public System.Reflection.EventInfo GetEvent (string name);

        public Type[] FindInterfaces (System.Reflection.TypeFilter! filter, object filterCriteria)
            requires filter != null otherwise ArgumentNullException;

        public Type[] GetInterfaces ();

        public Type GetInterface (string arg0, bool arg1);

        public Type GetInterface (string name);

        public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags arg0);

        public System.Reflection.FieldInfo[] GetFields ();

        public System.Reflection.FieldInfo GetField (string name);

        public System.Reflection.FieldInfo GetField (string arg0, System.Reflection.BindingFlags arg1);

        public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags arg0);

        public System.Reflection.MethodInfo[] GetMethods ();

        public System.Reflection.MethodInfo GetMethod (string! name)
            requires name != null otherwise ArgumentNullException;

        public System.Reflection.MethodInfo GetMethod (string! name, System.Reflection.BindingFlags bindingAttr)
            requires name != null otherwise ArgumentNullException;

        public System.Reflection.MethodInfo GetMethod (string! name, Type[]! types)
            requires name != null otherwise ArgumentNullException;
            requires types != null otherwise ArgumentNullException;

        public System.Reflection.MethodInfo GetMethod (string! name, Type[]! types, System.Reflection.ParameterModifier[] modifiers)
            requires name != null otherwise ArgumentNullException;
            requires types != null otherwise ArgumentNullException;

        public System.Reflection.MethodInfo GetMethod (string! name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[]! types, System.Reflection.ParameterModifier[] modifiers)
            requires name != null otherwise ArgumentNullException;
            requires types != null otherwise ArgumentNullException;

        public System.Reflection.MethodInfo GetMethod (string! name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[]! types, System.Reflection.ParameterModifier[] modifiers)
            requires name != null otherwise ArgumentNullException;
            requires types != null otherwise ArgumentNullException;

        public System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags arg0);

        public System.Reflection.ConstructorInfo[] GetConstructors ();

        public System.Reflection.ConstructorInfo GetConstructor (Type[] types);

        public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[]! types, System.Reflection.ParameterModifier[] modifiers)
            requires types != null otherwise ArgumentNullException;

        public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[]! types, System.Reflection.ParameterModifier[] modifiers)
            requires types != null otherwise ArgumentNullException;

        public int GetArrayRank ();

        public static Type GetTypeFromHandle (RuntimeTypeHandle handle);

        public static RuntimeTypeHandle GetTypeHandle (object! o)
            requires o != null otherwise ArgumentNullException;

        public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, Object[] args);

        public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, Object[] args, System.Globalization.CultureInfo culture);

        public object InvokeMember (string arg0, System.Reflection.BindingFlags arg1, System.Reflection.Binder arg2, object arg3, Object[] arg4, System.Reflection.ParameterModifier[] arg5, System.Globalization.CultureInfo arg6, String[] arg7);

        public static TypeCode GetTypeCode (Type type);

        public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);

        public static Type GetTypeFromCLSID (Guid clsid, string server);

        public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);

        public static Type GetTypeFromCLSID (Guid clsid);

        public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);

        public static Type GetTypeFromProgID (string progID, string server);

        public static Type GetTypeFromProgID (string progID, bool throwOnError);

        public static Type GetTypeFromProgID (string progID);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)][ResultNotNewlyAllocated]
        public Type! GetType ();

        [Pure][Reads(ReadsAttribute.Reads.Nothing)] 
        public static Type! GetType (string typeName);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)] 
        public static Type GetType (string typeName, bool throwOnError)
          ensures throwOnError ==> result != null;

        [Pure][Reads(ReadsAttribute.Reads.Nothing)] 
        public static Type GetType (string typeName, bool throwOnError, bool ignoreCase)
          ensures throwOnError ==> result != null;
    }
}
