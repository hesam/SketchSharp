//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Contracts;

namespace System.Collections
{

    public class BitArray
    {

        public bool IsReadOnly
        {
          get;
        }

        public object SyncRoot
        {
          get;
        }

        public bool IsSynchronized
        {
          get;
        }

        public int Length
        {
          get;
          set
            requires value >= 0 otherwise ArgumentOutOfRangeException;
        }

        public bool this [int index]
        {
          get;
          set;
        }

        public int Count
        {
          get;
        }

        [Pure] [GlobalAccess(false)] [Escapes(true,false)]
        public IEnumerator! GetEnumerator ();
            ensures result.IsNew;

        public object Clone ();

        public void CopyTo (Array! array, int index)
            requires array != null otherwise ArgumentNullException;
            requires index >= 0 otherwise ArgumentOutOfRangeException;

        public BitArray Not ();

        public BitArray Xor (BitArray! value)
            requires value != null otherwise ArgumentNullException;

        public BitArray Or (BitArray! value)
            requires value != null otherwise ArgumentNullException;

        public BitArray And (BitArray! value)
            requires value != null otherwise ArgumentNullException;

        public void SetAll (bool value);

        public void Set (int index, bool value)
            requires index >= 0 otherwise ArgumentOutOfRangeException;

        public bool Get (int index)
            requires index >= 0 otherwise ArgumentOutOfRangeException;

        public BitArray (BitArray! bits)
            requires bits != null otherwise ArgumentNullException;

        public BitArray (Int32[]! values)
            requires values != null otherwise ArgumentNullException;

        public BitArray (Boolean[]! values)
            requires values != null otherwise ArgumentNullException;

        public BitArray (Byte[]! bytes)
            requires bytes != null otherwise ArgumentNullException;

        public BitArray (int length, bool defaultValue)
            requires length >= 0 otherwise ArgumentOutOfRangeException;

        public BitArray (int length);
    }
}
