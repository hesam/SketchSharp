//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Contracts;

namespace System.IO
{

    public class StreamReader
    {

        public System.Text.Encoding! CurrentEncoding
        {
          get;
        }

        public Stream! BaseStream
        {
          get;
        }

        public string! ReadLine ();

        public string! ReadToEnd ();

        public int Read (char[]! buffer, int index, int count)
            requires buffer != null otherwise ArgumentNullException;
            requires index >= 0 otherwise ArgumentOutOfRangeException;
            requires count >= 0 otherwise ArgumentOutOfRangeException;
            requires index + count <= buffer.Length otherwise ArgumentException;

        public int Read ();

        public int Peek ();

        public void DiscardBufferedData ();

        public void Close ();

        public StreamReader (string! path, System.Text.Encoding! encoding, bool detectEncodingFromByteOrderMarks, int bufferSize)
            requires path != null otherwise ArgumentNullException;
            requires encoding != null otherwise ArgumentNullException;
            requires path.Length != 0 otherwise ArgumentException;
            requires bufferSize > 0 otherwise ArgumentOutOfRangeException;

        public StreamReader (string! path, System.Text.Encoding! encoding, bool detectEncodingFromByteOrderMarks)
            requires path != null otherwise ArgumentNullException;
            requires encoding != null otherwise ArgumentNullException;
            requires path.Length != 0 otherwise ArgumentException;

        public StreamReader (string! path, System.Text.Encoding! encoding)
            requires path != null otherwise ArgumentNullException;
            requires encoding != null otherwise ArgumentNullException;
            requires path.Length != 0 otherwise ArgumentException;

        public StreamReader (string! path, bool detectEncodingFromByteOrderMarks)
            requires path != null otherwise ArgumentNullException;
            requires path.Length != 0 otherwise ArgumentException;

        public StreamReader (string !path)
            requires path != null otherwise ArgumentNullException;
            requires path.Length != 0 otherwise ArgumentException;

        public StreamReader (Stream! stream, System.Text.Encoding! encoding, bool detectEncodingFromByteOrderMarks, int bufferSize)
            requires stream != null otherwise ArgumentNullException;
            requires encoding != null otherwise ArgumentNullException;
            requires bufferSize > 0 otherwise ArgumentOutOfRangeException;

        public StreamReader (Stream! stream, System.Text.Encoding! encoding, bool detectEncodingFromByteOrderMarks)
            requires stream != null otherwise ArgumentNullException;
            requires encoding != null otherwise ArgumentNullException;

        public StreamReader (Stream! stream, System.Text.Encoding! encoding)
            requires stream != null otherwise ArgumentNullException;
            requires encoding != null otherwise ArgumentNullException;

        public StreamReader (Stream! stream, bool detectEncodingFromByteOrderMarks)
            requires stream != null otherwise ArgumentNullException;

        public StreamReader (Stream! stream)
            requires stream != null otherwise ArgumentNullException;
    }
}
