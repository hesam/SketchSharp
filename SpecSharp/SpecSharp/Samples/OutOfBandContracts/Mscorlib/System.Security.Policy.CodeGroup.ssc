//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Contracts;

namespace System.Security.Policy
{

    public class CodeGroup
    {

        public string PermissionSetName
        {
          get;
        }

        public PolicyStatement PolicyStatement
        {
          get;
          set;
        }

        public string AttributeString
        {
          get;
        }

        public string Description
        {
          get;
          set;
        }

        public IMembershipCondition! MembershipCondition
        {
          get;
          set
            requires value != null otherwise ArgumentNullException;
        }

        public System.Collections.IList! Children
        {
          get;
          set
            requires value != null otherwise ArgumentNullException;
        }

        public string Name
        {
          get;
          set;
        }

        public string MergeLogic
        {
          get;
        }

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int GetHashCode ();

        public bool Equals (CodeGroup cg, bool compareChildren);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public bool Equals (object o);

        public void FromXml (System.Security.SecurityElement! e, PolicyLevel level)
            requires e != null otherwise ArgumentNullException;

        public System.Security.SecurityElement ToXml (PolicyLevel level);

        public void FromXml (System.Security.SecurityElement e);

        public System.Security.SecurityElement ToXml ();

        public CodeGroup Copy ();

        public CodeGroup ResolveMatchingCodeGroups (Evidence arg0);

        public PolicyStatement Resolve (Evidence arg0);

        public void RemoveChild (CodeGroup group);

        public void AddChild (CodeGroup! group)
            requires group != null otherwise ArgumentNullException;

        public CodeGroup (IMembershipCondition! membershipCondition, PolicyStatement policy)
            requires membershipCondition != null otherwise ArgumentNullException;
    }
}
