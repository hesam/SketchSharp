//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Contracts;

namespace System.Collections
{

    public class Queue
    {

        public object SyncRoot
        {
          get;
        }

        public bool IsSynchronized
        {
          get;
        }

        public int Count
        {
          get;
        }

        public void TrimToSize ();

        public Object[] ToArray ();

        public bool Contains (object obj);

        public static Queue Synchronized (Queue! queue)
            requires queue != null otherwise ArgumentNullException;

        public object Peek ();

        public object Dequeue ();

        [Pure] [GlobalAccess(false)] [Escapes(true,false)]
        public IEnumerator! GetEnumerator ();
            ensures result.IsNew;

        public void Enqueue (object obj);

        public void CopyTo (Array! array, int index)
            requires array != null otherwise ArgumentNullException;
            requires index >= 0 otherwise ArgumentOutOfRangeException;

        public void Clear ();

        public object Clone ();

        public Queue (ICollection! col)
            requires col != null otherwise ArgumentNullException;

        public Queue (int capacity, Single growFactor)
            requires capacity >= 0 otherwise ArgumentOutOfRangeException;
            requires growFactor >= 0 otherwise ArgumentOutOfRangeException;
            requires growFactor <= 0 otherwise ArgumentOutOfRangeException;

        public Queue (int capacity);

        public Queue ();
    }
}
