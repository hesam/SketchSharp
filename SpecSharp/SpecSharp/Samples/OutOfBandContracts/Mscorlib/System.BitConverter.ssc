//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;

namespace System
{

    public class BitConverter
    {

        public static double Int64BitsToDouble (Int64 value);

        public static Int64 DoubleToInt64Bits (double value);

        public static bool ToBoolean (Byte[]! value, int startIndex)
            requires value != null otherwise ArgumentNullException;
            requires startIndex >= 0 otherwise ArgumentOutOfRangeException;
            requires startIndex <= (value.Length - 1) otherwise ArgumentOutOfRangeException;

        public static string ToString (Byte[]! value, int startIndex)
            requires value != null otherwise ArgumentNullException;

        public static string ToString (Byte[]! value)
            requires value != null otherwise ArgumentNullException;

        public static string ToString (Byte[] arg0, int arg1, int arg2);

        public static double ToDouble (Byte[] arg0, int arg1);

        public static Single ToSingle (Byte[] arg0, int arg1);

        public static UInt64 ToUInt64 (Byte[] arg0, int arg1);

        public static UInt32 ToUInt32 (Byte[] arg0, int arg1);

        public static UInt16 ToUInt16 (Byte[] arg0, int arg1);

        public static Int64 ToInt64 (Byte[] arg0, int arg1);

        public static int ToInt32 (Byte[] arg0, int arg1);

        public static Int16 ToInt16 (Byte[] arg0, int arg1);

        public static Char ToChar (Byte[] arg0, int arg1);

        public static Byte[]! GetBytes (double value);

        public static Byte[]! GetBytes (Single value);

        public static Byte[]! GetBytes (UInt64 value);

        public static Byte[]! GetBytes (UInt32 value);

        public static Byte[]! GetBytes (UInt16 value);

        public static Byte[]! GetBytes (Int64 arg0);

        public static Byte[]! GetBytes (int arg0);

        public static Byte[]! GetBytes (Int16 arg0);

        public static Byte[]! GetBytes (Char arg0);

        public static Byte[]! GetBytes (bool value);
    }
}
