//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;

namespace System.Security.Cryptography
{

    public class DSACryptoServiceProvider
    {

        public static bool UseMachineKeyStore
        {
          get;
          set;
        }

        public bool PersistKeyInCsp
        {
          get;
          set;
        }

        public string SignatureAlgorithm
        {
          get;
        }

        public KeySizes[] LegalKeySizes
        {
          get;
        }

        public string KeyExchangeAlgorithm
        {
          get;
        }

        public int KeySize
        {
          get;
        }

        public bool VerifyHash (Byte[]! rgbHash, string str, Byte[]! rgbSignature)
            requires rgbHash != null otherwise ArgumentNullException;
            requires rgbSignature != null otherwise ArgumentNullException;

        public Byte[] SignHash (Byte[]! rgbHash, string str)
            requires rgbHash != null otherwise ArgumentNullException;

        public bool VerifySignature (Byte[] rgbHash, Byte[] rgbSignature);

        public Byte[] CreateSignature (Byte[] rgbHash);

        public bool VerifyData (Byte[] rgbData, Byte[] rgbSignature);

        public Byte[] SignData (Byte[] buffer, int offset, int count);

        public Byte[] SignData (Byte[] buffer);

        public Byte[] SignData (System.IO.Stream inputStream);

        public void ImportParameters (DSAParameters parameters);

        public DSAParameters ExportParameters (bool includePrivateParameters);

        public DSACryptoServiceProvider (int dwKeySize, CspParameters parameters);

        public DSACryptoServiceProvider (CspParameters parameters);

        public DSACryptoServiceProvider (int dwKeySize);

        public DSACryptoServiceProvider ();
    }
}
