//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Contracts;

namespace System
{

    public class Delegate
    {

        public System.Reflection.MethodInfo Method
        {
          get;
        }

        public object Target
        {
          get;
        }

        public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static bool operator != (Delegate d1, Delegate d2);

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public static bool operator == (Delegate d1, Delegate d2);

        public static Delegate CreateDelegate (Type! type, System.Reflection.MethodInfo! method)
            requires type != null otherwise ArgumentNullException;
            requires method != null otherwise ArgumentNullException;

        public static Delegate CreateDelegate (Type! type, Type! target, string! method)
            requires type != null otherwise ArgumentNullException;
            requires target != null otherwise ArgumentNullException;
            requires method != null otherwise ArgumentNullException;

        public static Delegate CreateDelegate (Type! type, object! target, string! method, bool ignoreCase)
            requires type != null otherwise ArgumentNullException;
            requires target != null otherwise ArgumentNullException;
            requires method != null otherwise ArgumentNullException;

        public static Delegate CreateDelegate (Type! type, object! target, string! method)
            requires type != null otherwise ArgumentNullException;
            requires target != null otherwise ArgumentNullException;
            requires method != null otherwise ArgumentNullException;

        public object Clone ();

        public static Delegate RemoveAll (Delegate source, Delegate value);

        public static Delegate Remove (Delegate a, Delegate b);
          ensures ((object)a) == null && ((object)b) == null ==> ((object)result) == null;
          ensures ((object)a) == null && ((object)b) != null ==> ((object)result) == null;
          ensures ((object)a) != null && ((object)b) == null ==> ((object)result) == (object)a;
          ensures ((object)a) != null && ((object)b) != null ==> ((object)result) != null && result.GetType() == a.GetType() && Owner.Same(result, a);

        public Delegate[] GetInvocationList ();

        public static Delegate Combine (Delegate[] delegates);

        public static Delegate Combine (Delegate a, Delegate b);
          ensures ((object)a) == null && ((object)b) == null ==> ((object)result) == null;
          ensures ((object)a) == null && ((object)b) != null ==> ((object)result) == (object)b;
          ensures ((object)a) != null && ((object)b) == null ==> ((object)result) == (object)a;
          ensures ((object)a) != null && ((object)b) != null ==> ((object)result) != null && result.GetType() == a.GetType() && Owner.Same(result, a);

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public int GetHashCode ();

        [Pure][Reads(ReadsAttribute.Reads.Nothing)]
        public bool Equals (object obj);

        public object DynamicInvoke (Object[] args);
    }
}
