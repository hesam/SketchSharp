//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Microsoft.Contracts;

namespace System.Collections {
  // Summary:
  //     Represents a nongeneric collection of key/value pairs.
  [ComVisible(true)]
  public interface IDictionary : ICollection, IEnumerable {
    // Summary:
    //     Gets a value indicating whether the System.Collections.IDictionary object
    //     has a fixed size.
    //
    // Returns:
    //     true if the System.Collections.IDictionary object has a fixed size; otherwise,
    //     false.
    bool IsFixedSize { get; }
    //
    // Summary:
    //     Gets a value indicating whether the System.Collections.IDictionary object
    //     is read-only.
    //
    // Returns:
    //     true if the System.Collections.IDictionary object is read-only; otherwise,
    //     false.
    bool IsReadOnly { get; }
    //
    // Summary:
    //     Gets an System.Collections.ICollection object containing the keys of the
    //     System.Collections.IDictionary object.
    //
    // Returns:
    //     An System.Collections.ICollection object containing the keys of the System.Collections.IDictionary
    //     object.
    [Pure][Reads(ReadsAttribute.Reads.Owned)]
    ICollection! Keys { [ElementCollection] get; }
    //
    // Summary:
    //     Gets an System.Collections.ICollection object containing the values in the
    //     System.Collections.IDictionary object.
    //
    // Returns:
    //     An System.Collections.ICollection object containing the values in the System.Collections.IDictionary
    //     object.
    [Pure][Reads(ReadsAttribute.Reads.Owned)]
    ICollection! Values { [ElementCollection] get; }

    // Summary:
    //     Gets or sets the element with the specified key.
    //
    // Parameters:
    //   key:
    //     The key of the element to get or set.
    //
    // Returns:
    //     The element with the specified key.
    //
    // Exceptions:
    //   System.NotSupportedException:
    //     The property is set and the System.Collections.IDictionary object is read-only.-or-
    //     The property is set, key does not exist in the collection, and the System.Collections.IDictionary
    //     has a fixed size.
    //
    //   System.ArgumentNullException:
    //     key is null.
    object this[object! key] { get; set; }

    // Summary:
    //     Adds an element with the provided key and value to the System.Collections.IDictionary
    //     object.
    //
    // Parameters:
    //   value:
    //     The System.Object to use as the value of the element to add.
    //
    //   key:
    //     The System.Object to use as the key of the element to add.
    //
    // Exceptions:
    //   System.ArgumentException:
    //     An element with the same key already exists in the System.Collections.IDictionary
    //     object.
    //
    //   System.ArgumentNullException:
    //     key is null.
    //
    //   System.NotSupportedException:
    //     The System.Collections.IDictionary is read-only.-or- The System.Collections.IDictionary
    //     has a fixed size.
    [WriteConfined]
    void Add(object! key, object value);
    //
    // Summary:
    //     Removes all elements from the System.Collections.IDictionary object.
    //
    // Exceptions:
    //   System.NotSupportedException:
    //     The System.Collections.IDictionary object is read-only.
    [WriteConfined]
    void Clear();
    //
    // Summary:
    //     Determines whether the System.Collections.IDictionary object contains an
    //     element with the specified key.
    //
    // Parameters:
    //   key:
    //     The key to locate in the System.Collections.IDictionary object.
    //
    // Returns:
    //     true if the System.Collections.IDictionary contains an element with the key;
    //     otherwise, false.
    //
    // Exceptions:
    //   System.ArgumentNullException:
    //     key is null.
    [Pure]
    bool Contains(object! key);
    //
    // Summary:
    //     Returns an System.Collections.IDictionaryEnumerator object for the System.Collections.IDictionary
    //     object.
    //
    // Returns:
    //     An System.Collections.IDictionaryEnumerator object for the System.Collections.IDictionary
    //     object.
    
    [Pure] [GlobalAccess(false)] [Escapes(true,false)]
    [return: Fresh]
    IDictionaryEnumerator! GetEnumerator();
      ensures result.IsNew;
    //
    // Summary:
    //     Removes the element with the specified key from the System.Collections.IDictionary
    //     object.
    //
    // Parameters:
    //   key:
    //     The key of the element to remove.
    //
    // Exceptions:
    //   System.NotSupportedException:
    //     The System.Collections.IDictionary object is read-only.-or- The System.Collections.IDictionary
    //     has a fixed size.
    //
    //   System.ArgumentNullException:
    //     key is null.
    [WriteConfined]
    void Remove(object! key);
  }
}
