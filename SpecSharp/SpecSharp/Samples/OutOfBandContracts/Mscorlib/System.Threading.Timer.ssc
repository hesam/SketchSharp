//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;

namespace System.Threading
{

    public class Timer
    {

        public void Dispose ();

        public bool Dispose (WaitHandle! notifyObject)
            requires notifyObject != null otherwise ArgumentNullException;

        public bool Change (Int64 dueTime, Int64 period);

        public bool Change (UInt32 dueTime, UInt32 period);

        public bool Change (TimeSpan dueTime, TimeSpan period);

        public bool Change (int dueTime, int period);

        public Timer (TimerCallback callback, object state, Int64 dueTime, Int64 period)
            requires dueTime >= -1 otherwise ArgumentOutOfRangeException;
            requires period >= -1 otherwise ArgumentOutOfRangeException;
            /* NOT VALID BECAUSE MAX_SUPPORTED_TIMEOUT IS PRIVATE
            requires dueTime <= System.Threading.Timer.MAX_SUPPORTED_TIMEOUT otherwise NotSupportedException;
            requires period <= System.Threading.Timer.MAX_SUPPORTED_TIMEOUT otherwise NotSupportedException;
            */

        public Timer (TimerCallback callback, object state, UInt32 dueTime, UInt32 period);

        public Timer (TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);

        public Timer (TimerCallback callback, object state, int dueTime, int period)
            requires dueTime >= -1 otherwise ArgumentOutOfRangeException;
            requires period >= -1 otherwise ArgumentOutOfRangeException;
    }
}
