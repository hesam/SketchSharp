//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;

namespace System.Reflection.Emit
{

    public class ModuleBuilder
    {

        public string FullyQualifiedName
        {
          get;
        }

        public void DefineUnmanagedResource (string! resourceFileName)
            requires resourceFileName != null otherwise ArgumentNullException;

        public void DefineUnmanagedResource (Byte[]! resource)
            requires resource != null otherwise ArgumentNullException;

        public bool IsTransient ();

        public void CreateGlobalFunctions ();

        public MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);

        public MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);

        public void SetSymCustomAttribute (string name, Byte[] data);

        public System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument (string url, Guid language, Guid languageVendor, Guid documentType);

        public void SetUserEntryPoint (System.Reflection.MethodInfo entryPoint);

        public System.Diagnostics.SymbolStore.ISymbolWriter GetSymWriter ();

        public MethodToken GetConstructorToken (System.Reflection.ConstructorInfo con);

        public SignatureToken GetSignatureToken (Byte[] sigBytes, int sigLength);

        public SignatureToken GetSignatureToken (SignatureHelper! sigHelper)
            requires sigHelper != null otherwise ArgumentNullException;

        public void SetCustomAttribute (CustomAttributeBuilder! customBuilder)
            requires customBuilder != null otherwise ArgumentNullException;

        public void SetCustomAttribute (System.Reflection.ConstructorInfo! con, Byte[]! binaryAttribute)
            requires con != null otherwise ArgumentNullException;
            requires binaryAttribute != null otherwise ArgumentNullException;

        public StringToken GetStringConstant (string str);

        public FieldToken GetFieldToken (System.Reflection.FieldInfo field);

        public System.Reflection.MethodInfo GetArrayMethod (Type arrayClass, string methodName, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);

        public MethodToken GetArrayMethodToken (Type arrayClass, string methodName, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);

        public MethodToken GetMethodToken (System.Reflection.MethodInfo method);

        public TypeToken GetTypeToken (string name);

        public TypeToken GetTypeToken (Type type);

        public FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);

        public FieldBuilder DefineInitializedData (string name, Byte[] data, System.Reflection.FieldAttributes attributes);

        public MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);

        public MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);

        public System.Resources.IResourceWriter DefineResource (string name, string description, System.Reflection.ResourceAttributes attribute);

        public System.Resources.IResourceWriter DefineResource (string name, string description);

        public EnumBuilder DefineEnum (string name, System.Reflection.TypeAttributes visibility, Type underlyingType);

        public TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, PackingSize packsize);

        public TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, int typesize);

        public TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, PackingSize packingSize, int typesize);

        public TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr);

        public TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent);

        public TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);

        public TypeBuilder DefineType (string name);

        public Type[] GetTypes ();

        public Type GetType (string className, bool throwOnError, bool ignoreCase);

        public Type GetType (string className, bool ignoreCase);

        public Type GetType (string className);
    }
}
