//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Contracts;

namespace System.Security
{

    public class PermissionSet
    {

        public bool IsReadOnly
        {
          get;
        }

        public object SyncRoot
        {
          get;
        }

        public bool IsSynchronized
        {
          get;
        }

        public int Count
        {
          get;
        }

        public bool ContainsNonCodeAccessPermissions ();

        public static Byte[] ConvertPermissionSet (string! inFormat, Byte[] inData, string! outFormat)
            requires inData == null || inFormat != null otherwise ArgumentNullException;
            requires outFormat != null otherwise ArgumentNullException;

        public SecurityElement ToXml ();

        public void FromXml (SecurityElement et);

        [Pure][Reads(ReadsAttribute.Reads.Owned)]
        public string ToString ();

        [Pure] [GlobalAccess(false)] [Escapes(true,false)]
        public System.Collections.IEnumerator! GetEnumerator ();
            ensures result.IsNew;

        public PermissionSet Copy ();

        public void PermitOnly ();

        public void Deny ();

        public void Assert ();

        public void Demand ();

        public PermissionSet Union (PermissionSet other);

        public PermissionSet Intersect (PermissionSet other);

        public bool IsSubsetOf (PermissionSet target);

        public bool IsUnrestricted ();

        public IPermission RemovePermission (Type permClass);

        public IPermission AddPermission (IPermission perm);

        public IPermission SetPermission (IPermission perm);

        public IPermission GetPermission (Type permClass);

        public bool IsEmpty ();

        public void CopyTo (Array! array, int index)
            requires array != null otherwise ArgumentNullException;

        public PermissionSet (PermissionSet permSet);

        public PermissionSet (System.Security.Permissions.PermissionState state)
            requires (int)state == 1 || (int)state == 0 otherwise ArgumentException;
    }
}
