//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;

namespace System.ComponentModel
{

    public class TypeConverter
    {
        public class StandardValuesCollection { }

        public TypeConverter ();

        public bool IsValid (ITypeDescriptorContext context, object value);

        public bool IsValid (object value);

        public bool GetStandardValuesSupported (ITypeDescriptorContext context);

        public bool GetStandardValuesSupported ();

        public bool GetStandardValuesExclusive (ITypeDescriptorContext context);

        public bool GetStandardValuesExclusive ();

        public StandardValuesCollection GetStandardValues (ITypeDescriptorContext context);

        public System.Collections.ICollection GetStandardValues ();

        public bool GetPropertiesSupported (ITypeDescriptorContext context);

        public bool GetPropertiesSupported ();

        public PropertyDescriptorCollection GetProperties (ITypeDescriptorContext context, object value, Attribute[] attributes);

        public PropertyDescriptorCollection GetProperties (ITypeDescriptorContext context, object value);

        public PropertyDescriptorCollection GetProperties (object value);

        public bool GetCreateInstanceSupported (ITypeDescriptorContext context);

        public bool GetCreateInstanceSupported ();

        public object CreateInstance (ITypeDescriptorContext context, System.Collections.IDictionary propertyValues);

        public object CreateInstance (System.Collections.IDictionary propertyValues);

        public string ConvertToString (ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);

        public string ConvertToString (ITypeDescriptorContext context, object value);

        public string ConvertToString (object value);

        public string ConvertToInvariantString (ITypeDescriptorContext context, object value);

        public string ConvertToInvariantString (object value);

        public object ConvertTo (ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type! destinationType)
            requires destinationType != null otherwise ArgumentNullException;

        public object ConvertTo (object value, Type destinationType);

        public object ConvertFromString (ITypeDescriptorContext context, System.Globalization.CultureInfo culture, string text);

        public object ConvertFromString (ITypeDescriptorContext context, string text);

        public object ConvertFromString (string text);

        public object ConvertFromInvariantString (ITypeDescriptorContext context, string text);

        public object ConvertFromInvariantString (string text);

        public object ConvertFrom (ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);

        public object ConvertFrom (object value);

        public bool CanConvertTo (ITypeDescriptorContext context, Type destinationType);

        public bool CanConvertTo (Type destinationType);

        public bool CanConvertFrom (ITypeDescriptorContext context, Type sourceType);

        public bool CanConvertFrom (Type sourceType);
    }
}
