//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Security;
using System.Text;
using Microsoft.Contracts;

namespace System.Diagnostics
{
  // Summary:
  //     Specifies a set of values used when starting a process.
  [TypeConverterAttribute(typeof(ExpandableObjectConverter))]
  public sealed class ProcessStartInfo
  {
    // Summary:
    //     Initializes a new instance of the System.Diagnostics.ProcessStartInfo class
    //     without specifying a file name with which to start the process.
    public ProcessStartInfo();
    //
    // Summary:
    //     Initializes a new instance of the System.Diagnostics.ProcessStartInfo class
    //     and specifies a file name such as an application or document with which to
    //     start the process.
    //
    // Parameters:
    //   fileName:
    //     An application or document with which to start a process.
    public ProcessStartInfo(string fileName);
    //
    // Summary:
    //     Initializes a new instance of the System.Diagnostics.ProcessStartInfo class
    //     and specifies an application file name with which to start the process, as
    //     well as a set of command line arguments to pass to the application.
    //
    // Parameters:
    //   fileName:
    //     An application with which to start a process.
    //
    //   arguments:
    //     Command line arguments to pass to the application when the process starts.
    public ProcessStartInfo(string fileName, string arguments);

    // Summary:
    //     Gets or sets the set of command line arguments to use when starting the application.
    //
    // Returns:
    //     File type-specific arguments that the system can associate with the application
    //     specified in the System.Diagnostics.ProcessStartInfo.FileName property. The
    //     default is an empty string (""). The maximum string length is 2003 characters
    //     in .NET Framework applications and 488 characters in .NET Compact Framework
    //     applications.
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [DefaultValue("")]
    [MonitoringDescription("ProcessArguments")]
    //[RecommendedAsConfigurable(true)]
    [NotifyParentProperty(true)]
    public string Arguments { get; set; }
    //
    // Summary:
    //     Gets or sets a value indicating whether to start the process in a new window.
    //
    // Returns:
    //     true to start the process without creating a new window to contain it; otherwise,
    //     false. The default is false.
    [DefaultValue(false)]
    [NotifyParentProperty(true)]
    [MonitoringDescription("ProcessCreateNoWindow")]
    public bool CreateNoWindow { get; set; }
    //
    // Summary:
    //     Gets or sets a value identifying the domain to use when starting the process.
    //
    // Returns:
    //     The Active Directory domain to use when starting the process. The domain
    //     property is primarily of interest to users within enterprise environments
    //     that utilize Active Directory.
    [NotifyParentProperty(true)]
    public string Domain { get; set; }
    //
    // Summary:
    //     Gets search paths for files, directories for temporary files, application-specific
    //     options, and other similar information.
    //
    // Returns:
    //     A System.Collections.Specialized.StringDictionary that provides environment
    //     variables that apply to this process and child processes. The default is
    //     null.
    [NotifyParentProperty(true)]
    [Editor("System.Diagnostics.Design.StringDictionaryEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    // [DesignerSerializationVisibility(2)]
    [DefaultValue("")]
    [MonitoringDescription("ProcessEnvironmentVariables")]
    public StringDictionary EnvironmentVariables { get ensures Owner.Same(this, result); }
    //
    // Summary:
    //     Gets or sets a value indicating whether an error dialog is displayed to the
    //     user if the process cannot be started.
    //
    // Returns:
    //     true to display an error dialog on the screen if the process cannot be started;
    //     otherwise, false.
    [DefaultValue(false)]
    [MonitoringDescription("ProcessErrorDialog")]
    [NotifyParentProperty(true)]
    public bool ErrorDialog { get; set; }
    //
    // Summary:
    //     Gets or sets the window handle to use when an error dialog is shown for a
    //     process that cannot be started.
    //
    // Returns:
    //     An System.IntPtr that identifies the handle of the error dialog that results
    //     from a process start failure.
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public IntPtr ErrorDialogParentHandle { get; set; }
    //
    // Summary:
    //     Gets or sets the application or document to start.
    //
    // Returns:
    //     The name of the application to start, or the name of a document of a file
    //     type that is associated with an application and that has a default open action
    //     available to it. The default is an empty string ("").
    [NotifyParentProperty(true)]
    [DefaultValue("")]
    [Editor("System.Diagnostics.Design.StartFileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [MonitoringDescription("ProcessFileName")]
    //[RecommendedAsConfigurable(true)]
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    public string FileName { get; set; }
    //
    // Summary:
    //     Gets or sets a value indicating whether the Windows user profile is to be
    //     loaded from the registry.
    //
    // Returns:
    //     true to load the Windows user profile; otherwise, false.
    [NotifyParentProperty(true)]
    public bool LoadUserProfile { get; set; }
    //
    // Summary:
    //     Gets or sets a secure string containing the user password to use when starting
    //     the process.
    //
    // Returns:
    //     A System.Security.SecureString containing the user password to use when starting
    //     the process.
    public SecureString Password { get; set; }
    //
    // Summary:
    //     Gets or sets a value indicating whether the error output of an application
    //     is written to the System.Diagnostics.Process.StandardError stream.
    //
    // Returns:
    //     true to write error output to System.Diagnostics.Process.StandardError; otherwise,
    //     false.
    [DefaultValue(false)]
    [MonitoringDescription("ProcessRedirectStandardError")]
    [NotifyParentProperty(true)]
    public bool RedirectStandardError { get; set; }
    //
    // Summary:
    //     Gets or sets a value indicating whether the input for an application is read
    //     from the System.Diagnostics.Process.StandardInput stream.
    //
    // Returns:
    //     true to read input from System.Diagnostics.Process.StandardInput; otherwise,
    //     false.
    [MonitoringDescription("ProcessRedirectStandardInput")]
    [DefaultValue(false)]
    [NotifyParentProperty(true)]
    public bool RedirectStandardInput { get; set; }
    //
    // Summary:
    //     Gets or sets a value indicating whether the output of an application is written
    //     to the System.Diagnostics.Process.StandardOutput stream.
    //
    // Returns:
    //     true to write output to System.Diagnostics.Process.StandardOutput; otherwise,
    //     false.
    [MonitoringDescription("ProcessRedirectStandardOutput")]
    [DefaultValue(false)]
    [NotifyParentProperty(true)]
    public bool RedirectStandardOutput { get; set; }
    //
    // Summary:
    //     Gets or sets the preferred encoding for error output.
    //
    // Returns:
    //     An System.Text.Encoding object representing the preferred encoding for error
    //     output. The default is null.
    public Encoding StandardErrorEncoding { get; set; }
    //
    // Summary:
    //     Gets or sets the preferred encoding for standard output.
    //
    // Returns:
    //     An System.Text.Encoding object representing the preferred encoding for standard
    //     output. The default is null.
    public Encoding StandardOutputEncoding { get; set; }
    //
    // Summary:
    //     Gets or sets the user name to be used when starting the process.
    //
    // Returns:
    //     The user name to use when starting the process.
    [NotifyParentProperty(true)]
    public string UserName { get; set; }
    //
    // Summary:
    //     Gets or sets a value indicating whether to use the operating system shell
    //     to start the process.
    //
    // Returns:
    //     true to use the shell when starting the process; otherwise, the process is
    //     created directly from the executable file. The default is true.
    [MonitoringDescription("ProcessUseShellExecute")]
    [DefaultValue(true)]
    [NotifyParentProperty(true)]
    public bool UseShellExecute { get; set; }
    //
    // Summary:
    //     Gets or sets the verb to use when opening the application or document specified
    //     by the System.Diagnostics.ProcessStartInfo.FileName property.
    //
    // Returns:
    //     The action to take with the file that the process opens. The default is an
    //     empty string ("").
    [NotifyParentProperty(true)]
    [DefaultValue("")]
    [TypeConverterAttribute("System.Diagnostics.Design.VerbConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [MonitoringDescription("ProcessVerb")]
    public string Verb { get; set; }
    //
    // Summary:
    //     Gets the set of verbs associated with the type of file specified by the System.Diagnostics.ProcessStartInfo.FileName
    //     property.
    //
    // Returns:
    //     The actions that the system can apply to the file indicated by the System.Diagnostics.ProcessStartInfo.FileName
    //     property.
    [Browsable(false)]
    [DesignerSerializationVisibility(0)]
    public string[] Verbs { get; }
    //
    // Summary:
    //     Gets or sets the window state to use when the process is started.
    //
    // Returns:
    //     A System.Diagnostics.ProcessWindowStyle that indicates whether the process
    //     is started in a window that is maximized, minimized, normal (neither maximized
    //     nor minimized), or not visible. The default is normal.
    //
    // Exceptions:
    //   System.ComponentModel.InvalidEnumArgumentException:
    //     The window style is not one of the System.Diagnostics.ProcessWindowStyle
    //     enumeration members.
    [NotifyParentProperty(true)]
    [MonitoringDescription("ProcessWindowStyle")]
    public ProcessWindowStyle WindowStyle { get; set; }
    //
    // Summary:
    //     Gets or sets the initial directory for the process to be started.
    //
    // Returns:
    //     The fully qualified name of the directory that contains the process to be
    //     started. The default is an empty string ("").
    [NotifyParentProperty(true)]
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [MonitoringDescription("ProcessWorkingDirectory")]
    //[RecommendedAsConfigurable(true)]
    [DefaultValue("")]
    [Editor("System.Diagnostics.Design.WorkingDirectoryEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    public string WorkingDirectory { get; set; }
  }
}
