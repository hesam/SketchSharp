//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;

namespace System.IO
{

    public class FileSystemWatcher
    {

        public bool EnableRaisingEvents
        {
          get;
          set;
        }

        public string Filter
        {
          get;
          set;
        }

        public NotifyFilters NotifyFilter
        {
          get;
          set;
        }

        public System.ComponentModel.ISite Site
        {
          get;
          set;
        }

        public int InternalBufferSize
        {
          get;
          set;
        }

        public bool IncludeSubdirectories
        {
          get;
          set;
        }

        public string Path
        {
          get;
          set;
        }

        public System.ComponentModel.ISynchronizeInvoke SynchronizingObject
        {
          get;
          set;
        }

        public WaitForChangedResult WaitForChanged (WatcherChangeTypes changeType, int timeout);

        public WaitForChangedResult WaitForChanged (WatcherChangeTypes changeType);

        public void EndInit ();

        public void BeginInit ();

        public void remove_Renamed (RenamedEventHandler value);

        public void add_Renamed (RenamedEventHandler value);

        public void remove_Error (ErrorEventHandler value);

        public void add_Error (ErrorEventHandler value);

        public void remove_Deleted (FileSystemEventHandler value);

        public void add_Deleted (FileSystemEventHandler value);

        public void remove_Created (FileSystemEventHandler value);

        public void add_Created (FileSystemEventHandler value);

        public void remove_Changed (FileSystemEventHandler value);

        public void add_Changed (FileSystemEventHandler value);

        public FileSystemWatcher (string! path, string! filter)
            requires path != null otherwise ArgumentNullException;
            requires filter != null otherwise ArgumentNullException;
            requires path.Length != 0 otherwise ArgumentException;

        public FileSystemWatcher (string path);

        public FileSystemWatcher ();
    }
}
