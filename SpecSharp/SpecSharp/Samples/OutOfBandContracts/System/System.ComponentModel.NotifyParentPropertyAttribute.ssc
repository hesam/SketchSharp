//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using Microsoft.Contracts;

namespace System.ComponentModel {
  // Summary:
  //     Indicates that the parent property is notified when the value of the property
  //     that this attribute is applied to is modified. This class cannot be inherited.
  [AttributeUsage(AttributeTargets.Property)]
  public sealed class NotifyParentPropertyAttribute : Attribute {
    // Summary:
    //     Indicates the default attribute state, that the property should not notify
    //     the parent property of changes to its value. This field is read-only.
    public static readonly NotifyParentPropertyAttribute Default;
    //
    // Summary:
    //     Indicates that the parent property is not be notified of changes to the value
    //     of the property. This field is read-only.
    public static readonly NotifyParentPropertyAttribute No;
    //
    // Summary:
    //     Indicates that the parent property is notified of changes to the value of
    //     the property. This field is read-only.
    public static readonly NotifyParentPropertyAttribute Yes;

    // Summary:
    //     Initializes a new instance of the System.ComponentModel.NotifyParentPropertyAttribute
    //     class, using the specified value to determine whether the parent property
    //     is notified of changes to the value of the property.
    //
    // Parameters:
    //   notifyParent:
    //     true if the parent should be notified of changes; otherwise, false.
    public NotifyParentPropertyAttribute (bool notifyParent);

    // Summary:
    //     Gets or sets a value indicating whether the parent property should be notified
    //     of changes to the value of the property.
    //
    // Returns:
    //     true if the parent property should be notified of changes; otherwise, false.
    public bool NotifyParent { get; }

    // Summary:
    //     Gets a value indicating whether the specified object is the same as the current
    //     object.
    //
    // Parameters:
    //   obj:
    //     The object to test for equality.
    //
    // Returns:
    //     true if the object is the same as this object; otherwise, false.
    [Pure][Reads(ReadsAttribute.Reads.Nothing)]
    public override bool Equals (object obj);
    //
    // Summary:
    //     Gets the hash code for this object.
    //
    // Returns:
    //     The hash code for the object the attribute belongs to.
    [Pure][Reads(ReadsAttribute.Reads.Owned)]
    public override int GetHashCode ();
    //
    // Summary:
    //     Gets a value indicating whether the current value of the attribute is the
    //     default value for the attribute.
    //
    // Returns:
    //     true if the current value of the attribute is the default value of the attribute;
    //     otherwise, false.
    public override bool IsDefaultAttribute ();
  }
}
