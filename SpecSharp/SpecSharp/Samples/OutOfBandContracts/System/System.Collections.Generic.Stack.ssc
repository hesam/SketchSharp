//-----------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
/*\
 *     IMPORTANT! This is an unofficial contract.
 *                It may be inaccurate and incomplete.
 *                It is being provided only as a sample of how to write
 *                out-of-band contracts.
\*/
using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace System.Collections.Generic {
  // Summary:
  //     Represents a variable size last-in-first-out (LIFO) collection of instances
  //     of the same arbitrary type.
  [Serializable]
  [DebuggerDisplay("Count = {Count}")]
  [ComVisible(false)]
  public class Stack<T>{
    // Summary:
    //     Initializes a new instance of the System.Collections.Generic.Stack<T> class
    //     that is empty and has the default initial capacity.
    public Stack();
    //
    // Summary:
    //     Initializes a new instance of the System.Collections.Generic.Stack<T> class
    //     that contains elements copied from the specified collection and has sufficient
    //     capacity to accommodate the number of elements copied.
    //
    // Parameters:
    //   collection:
    //     The collection to copy elements from.
    //
    // Exceptions:
    //   System.ArgumentNullException:
    //     collection is null.
    public Stack(IEnumerable<T> collection);
    //
    // Summary:
    //     Initializes a new instance of the System.Collections.Generic.Stack<T> class
    //     that is empty and has the specified initial capacity or the default initial
    //     capacity, whichever is greater.
    //
    // Parameters:
    //   capacity:
    //     The initial number of elements that the System.Collections.Generic.Stack<T>
    //     can contain.
    //
    // Exceptions:
    //   System.ArgumentOutOfRangeException:
    //     capacity is less than zero.
    public Stack(int capacity);

    // Summary:
    //     Gets the number of elements contained in the System.Collections.Generic.Stack<T>.
    //
    // Returns:
    //     The number of elements contained in the System.Collections.Generic.Stack<T>.
    public int Count { get; }

    // Summary:
    //     Removes all objects from the System.Collections.Generic.Stack<T>.
    public void Clear();
    //
    // Summary:
    //     Determines whether an element is in the System.Collections.Generic.Stack<T>.
    //
    // Parameters:
    //   item:
    //     The object to locate in the System.Collections.Generic.Stack<T>. The value
    //     can be null for reference types.
    //
    // Returns:
    //     true if item is found in the System.Collections.Generic.Stack<T>; otherwise,
    //     false.
    public bool Contains(T item);
    //
    // Summary:
    //     Copies the System.Collections.Generic.Stack<T> to an existing one-dimensional
    //     System.Array, starting at the specified array index.
    //
    // Parameters:
    //   array:
    //     The one-dimensional System.Array that is the destination of the elements
    //     copied from System.Collections.Generic.Stack<T>. The System.Array must have
    //     zero-based indexing.
    //
    //   arrayIndex:
    //     The zero-based index in array at which copying begins.
    //
    // Exceptions:
    //   System.ArgumentException:
    //     arrayIndex is equal to or greater than the length of array.-or-The number
    //     of elements in the source System.Collections.Generic.Stack<T> is greater
    //     than the available space from arrayIndex to the end of the destination array.
    //
    //   System.ArgumentOutOfRangeException:
    //     arrayIndex is less than zero.
    //
    //   System.ArgumentNullException:
    //     array is null.
    public void CopyTo(T[] array, int arrayIndex);
    //
    // Summary:
    //     Returns an enumerator for the System.Collections.Generic.Stack<T>.
    //
    // Returns:
    //     An System.Collections.Generic.Stack<T>.Enumerator for the System.Collections.Generic.Stack<T>.
    public Stack<T>.Enumerator GetEnumerator();
    //
    // Summary:
    //     Returns the object at the top of the System.Collections.Generic.Stack<T>
    //     without removing it.
    //
    // Returns:
    //     The object at the top of the System.Collections.Generic.Stack<T>.
    //
    // Exceptions:
    //   System.InvalidOperationException:
    //     The System.Collections.Generic.Stack<T> is empty.
    public T! Peek();
    //
    // Summary:
    //     Removes and returns the object at the top of the System.Collections.Generic.Stack<T>.
    //
    // Returns:
    //     The object removed from the top of the System.Collections.Generic.Stack<T>.
    //
    // Exceptions:
    //   System.InvalidOperationException:
    //     The System.Collections.Generic.Stack<T> is empty.
    public T! Pop();
    //
    // Summary:
    //     Inserts an object at the top of the System.Collections.Generic.Stack<T>.
    //
    // Parameters:
    //   item:
    //     The object to push onto the System.Collections.Generic.Stack<T>. The value
    //     can be null for reference types.
    public void Push(T item);
    //
    // Summary:
    //     Copies the System.Collections.Generic.Stack<T> to a new array.
    //
    // Returns:
    //     A new array containing copies of the elements of the System.Collections.Generic.Stack<T>.
    public T[] ToArray();
    //
    // Summary:
    //     Sets the capacity to the actual number of elements in the System.Collections.Generic.Stack<T>,
    //     if that number is less than 90 percent of current capacity.
    public void TrimExcess();

    // Summary:
    //     Enumerates the elements of a System.Collections.Generic.Stack<T>.
    [Serializable]
    public struct Enumerator{

      // Summary:
      //     Gets the element at the current position of the enumerator.
      //
      // Returns:
      //     The element in the System.Collections.Generic.Stack<T> at the current position
      //     of the enumerator.
      //
      // Exceptions:
      //   System.InvalidOperationException:
      //     The enumerator is positioned before the first element of the collection or
      //     after the last element.
      public T Current { get; }

      // Summary:
      //     Releases all resources used by the System.Collections.Generic.Stack<T>.Enumerator.
      public void Dispose();
      //
      // Summary:
      //     Advances the enumerator to the next element of the System.Collections.Generic.Stack<T>.
      //
      // Returns:
      //     true if the enumerator was successfully advanced to the next element; false
      //     if the enumerator has passed the end of the collection.
      //
      // Exceptions:
      //   System.InvalidOperationException:
      //     The collection was modified after the enumerator was created.
      public bool MoveNext();
    }
  }
}
