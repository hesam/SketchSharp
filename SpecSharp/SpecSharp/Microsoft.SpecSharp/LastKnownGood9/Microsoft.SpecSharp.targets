<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  
   <PropertyGroup>
        <SpecSharpBuildDependsOn>
            BeforeBuild;
            CoreSpecSharpBuild;
            PostBuildEvent;
            AfterBuild
        </SpecSharpBuildDependsOn>
    </PropertyGroup>
    <Target
        Name="SpecSharpBuild"
        Condition=" '$(InvalidConfigurationWarning)' != 'true' "
        Outputs="$(TargetPath)"
        DependsOnTargets="$(SpecSharpBuildDependsOn)"
    />

    <PropertyGroup>
        <CoreSpecSharpBuildDependsOn>
            BuildOnlySettings;
            PrepareForBuild;
            PreBuildEvent;
            UnmanagedUnregistration;
            ResolveReferences;
            PrepareResources;
            ResolveKeySource;
            SpecSharpCompile;
            SGen;
            CreateSatelliteAssemblies;
            GenerateManifests;
            PrepareForRun;
            ObjectRelationalValidator;
            UnmanagedRegistration;
            IncrementalClean
        </CoreSpecSharpBuildDependsOn>
    </PropertyGroup>
    <Target
        Name="CoreSpecSharpBuild"
        DependsOnTargets="$(CoreSpecSharpBuildDependsOn)">

        <OnError Condition="'$(RunPostBuildEvent)'=='Always' or '$(RunPostBuildEvent)'=='OnOutputUpdated'" ExecuteTargets="TimeStampAfterCompile;PostBuildEvent"/>
        <OnError ExecuteTargets="RecordFileWrites"/>

    </Target>
  

    <PropertyGroup>
        <SpecSharpCompileDependsOn>
            ResolveReferences;
            ResolveKeySource;
            BeforeCompile;
            TimeStampBeforeCompile;
            CoreSpecSharpCompile;
            TimeStampAfterCompile;
            AfterCompile
        </SpecSharpCompileDependsOn>
    </PropertyGroup>
    <Target
        Name="SpecSharpCompile"
        DependsOnTargets="$(SpecSharpCompileDependsOn)"/>

  <UsingTask TaskName="Microsoft.SpecSharp.SpecSharpCompile" AssemblyFile="Microsoft.SpecSharp.dll" />
  <Target
      Name="CoreSpecSharpCompile"
      Inputs="$(MSBuildAllProjects);
              @(Compile);
              @(ManifestResourceWithNoCulture);
              $(ApplicationIcon);
              $(AssemblyOriginatorKeyFile);
              @(ManifestNonResxWithNoCultureOnDisk);
              @(ReferencePath);
              @(CompiledLicenseFile)"
      Outputs="$(DocFile);
                @(IntermediateAssembly);"
      DependsOnTargets="$(CoreCompileDependsOn)"
  >
    <Delete Files="@(IntermediateAssembly->'%(RelativeDir)%(Filename).pdb')"
                Condition=" '$(BuildingProject)' == 'true' "/>

    <SpecSharpCompile
            AdditionalLibPaths="$(AdditionalLibPaths)"
            AddModules="@(AddModules)"
            AllowUnsafeBlocks="$(AllowUnsafeBlocks)"
            BaseAddress="$(BaseAddress)"
            CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
            CodePage="$(CodePage)"
            DebugType="$(DebugType)"
            DefineConstants="$(DefineConstants)"
            DelaySign="$(DelaySign)"
            DisabledWarnings="$(NoWarn)"
            DocumentationFile="$(DocFile)"
            EmitDebugInformation="$(DebugSymbols)"
            ErrorReport="$(ErrorReport)"
            FileAlignment="$(FileAlignment)"
            GenerateFullPaths="$(GenerateFullPaths)"
            KeyContainer="$(KeyContainerName)"
            KeyFile="$(KeyOriginatorFile)"
            LangVersion="$(LangVersion)"
            MainEntryPoint="$(StartupObject)"
            NoConfig="true"
            NoLogo="$(NoLogo)"
            NoStandardLib="$(NoStdLib)"
            Optimize="$(Optimize)"
            OriginalAssembly="$(OriginalAssembly)"
            OutputAssembly="@(IntermediateAssembly)"
            Platform="$(PlatformTarget)"
            ProgramVerifierCommandLineOptions="$(ProgramVerifierCommandLineOptions)"
            References="@(ReferencePath)"
	    ReferenceTypesAreNonNullByDefault = "$(ReferenceTypesAreNonNullByDefault)"
            Resources="@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile)"
            Sources="@(Compile)"
            TargetType="$(OutputType)"
            TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
            UseHostCompilerIfAvailable="true"      
            Utf8Output="$(Utf8Output)"
            Verify="$(Verify)"
            WarningLevel="$(WarningLevel)"
            WarningsAsErrors="$(WarningsAsErrors)"
            WarningsNotAsErrors="$(WarningsNotAsErrors)"
            Win32Icon="$(ApplicationIcon)"
            Win32Resource="$(Win32Resource)"
            />
  </Target>

</Project>
